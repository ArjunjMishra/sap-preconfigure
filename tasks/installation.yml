---
# tasks file for sap-preconfigure: installation

- name: Ensure required package groups are installed
  package:
    state: present
    name: "{{ __sap_preconfigure_packagegroups }}"

- name: Ensure required packages are installed
  package:
    state: present
    name: "{{ __sap_preconfigure_packages }}"
  register: sap_preconfigure_register_groupinstall

- name: Ensure minimum packages are installed
  block:
    - name: check if minimum release needs to be installed
      shell: |
        set -x
        required_pkg={{ pkg | join('-') }}
        newest=$(echo -e "$required_pkg\n$(rpm -q {{ pkg[0] }} )"| sort -V | tail -1)
        if [ $newest == $required_pkg ]; then
           echo $newest
        fi
      loop: "{{ __sap_preconfigure_min_pkgs }}"
      loop_control:
        loop_var: pkg
      check_mode: no
      register: __sap_preconfigure_register_minpkglist
      changed_when: false

    - name: Initialize an empty list for our strings
      set_fact:
        __sap_preconfigure_fact_minpkglist: []

    - name: Create list of packages to be installed
      set_fact:
        __sap_preconfigure_fact_minpkglist: "{{ __sap_preconfigure_fact_minpkglist | difference(['']) + [ pkg.stdout ] }}"
      loop: "{{ __sap_preconfigure_register_minpkglist.results }}"
      loop_control:
        loop_var: pkg
    - debug: var=__sap_preconfigure_fact_minpkglist

    - name: Install minimum packages if required
      package:
        name: "{{ __sap_preconfigure_fact_minpkglist }}"
        state: present
      when: not ( __sap_preconfigure_fact_minpkglist == [ "" ] )

  when:
    - sap_preconfigure_min_package_check|bool
    - not( (__sap_preconfigure_min_pkgs is undefined) or (__sap_preconfigure_min_pkgs is none) or (__sap_preconfigure_min_pkgs | trim == '') )

- name: Ensure system is updated to the latest patchlevel
  package:
    state: latest
    name: "*"
  when: sap_preconfigure_update
  register: sap_preconfigure_register_packageinstall

- set_fact:
    needs_restarting_command: "needs-restarting -r"
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version == '7'

- set_fact:
    needs_restarting_command: "yum needs-restarting -r"
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version == '8'

- name: Check if system needs to be restarted
  command: "{{ needs_restarting_command }}"
  register: needs_restarting_result
  ignore_errors: true
  changed_when: false
  args:
    warn: false

- name: Call Reboot handler if necessary
  command: /bin/true
  notify: "Reboot handler"
  when: needs_restarting_result.rc == 1

...
